diff -ur aufs-2.2.old/Makefile aufs-2.2/Makefile
--- aufs-2.2.old/Makefile	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/Makefile	2012-07-31 11:05:11.000000000 -0700
@@ -30,8 +30,8 @@
 install: fs/aufs/aufs.ko
 	${MAKE} ${MakeMod} modules_install
 
-install_header install_headers: usr/include/linux/aufs_type.h
-	install -o root -g root -p usr/include/linux/aufs_type.h \
+install_header: usr/include/linux/aufs_type.h
+	install usr/include/linux/aufs_type.h \
 		${DESTDIR}/usr/include/linux
 
 aufs.ko: fs/aufs/aufs.ko
diff -ur aufs-2.2.old/fs/aufs/branch.c aufs-2.2/fs/aufs/branch.c
--- aufs-2.2.old/fs/aufs/branch.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/branch.c	2012-07-31 11:03:52.000000000 -0700
@@ -330,7 +330,7 @@
 	 * cf. AUFS_MAX_NAMELEN in include/linux/aufs_type.h
 	 */
 	h_dentry = path->dentry;
-	err = vfs_statfs(h_dentry, &kst);
+	err = vfs_statfs(path, &kst);
 	if (unlikely(err))
 		goto out;
 	err = -EINVAL;
diff -ur aufs-2.2.old/fs/aufs/dir.c aufs-2.2/fs/aufs/dir.c
--- aufs-2.2.old/fs/aufs/dir.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/dir.c	2012-07-31 11:03:52.000000000 -0700
@@ -320,13 +320,12 @@
 /*
  * @file may be NULL
  */
-static int aufs_fsync_dir(struct file *file, int datasync)
+static int aufs_fsync_dir(struct file *file, struct dentry *dentry,
+			  int datasync)
 {
 	int err;
-	struct dentry *dentry;
 	struct super_block *sb;
 
-	dentry = file->f_dentry;
 	IMustLock(dentry->d_inode);
 
 	err = 0;
diff -ur aufs-2.2.old/fs/aufs/f_op.c aufs-2.2/fs/aufs/f_op.c
--- aufs-2.2.old/fs/aufs/f_op.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/f_op.c	2012-07-31 11:03:52.000000000 -0700
@@ -550,16 +550,15 @@
 
 /* ---------------------------------------------------------------------- */
 
-static int aufs_fsync_nondir(struct file *file, int datasync)
+static int aufs_fsync_nondir(struct file *file, struct dentry *dentry,
+			     int datasync)
 {
 	int err;
 	struct au_pin pin;
-	struct dentry *dentry;
 	struct inode *inode;
 	struct file *h_file;
 	struct super_block *sb;
 
-	dentry = file->f_dentry;
 	inode = dentry->d_inode;
 	IMustLock(file->f_mapping->host);
 	if (inode != file->f_mapping->host) {
diff -ur aufs-2.2.old/fs/aufs/i_op.c aufs-2.2/fs/aufs/i_op.c
--- aufs-2.2.old/fs/aufs/i_op.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/i_op.c	2012-07-31 11:03:52.000000000 -0700
@@ -694,19 +694,6 @@
 	}
 
 	a->h_path.mnt = au_sbr_mnt(sb, a->btgt);
-	if ((ia->ia_valid & (ATTR_MODE | ATTR_CTIME))
-	    == (ATTR_MODE | ATTR_CTIME)) {
-		err = security_path_chmod(a->h_path.dentry, a->h_path.mnt,
-					  ia->ia_mode);
-		if (unlikely(err))
-			goto out_unlock;
-	} else if ((ia->ia_valid & (ATTR_UID | ATTR_GID))
-		   && (ia->ia_valid & ATTR_CTIME)) {
-		err = security_path_chown(&a->h_path, ia->ia_uid, ia->ia_gid);
-		if (unlikely(err))
-			goto out_unlock;
-	}
-
 	if (ia->ia_valid & ATTR_SIZE) {
 		struct file *f;
 
diff -ur aufs-2.2.old/fs/aufs/super.c aufs-2.2/fs/aufs/super.c
--- aufs-2.2.old/fs/aufs/super.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/super.c	2012-07-31 11:03:52.000000000 -0700
@@ -320,7 +320,7 @@
 	u64 blocks, bfree, bavail, files, ffree;
 	aufs_bindex_t bend, bindex, i;
 	unsigned char shared;
-	struct vfsmount *h_mnt;
+	struct path h_path;
 	struct super_block *h_sb;
 
 	err = 0;
@@ -332,8 +332,8 @@
 	bavail = 0;
 	bend = au_sbend(sb);
 	for (bindex = 0; bindex <= bend; bindex++) {
-		h_mnt = au_sbr_mnt(sb, bindex);
-		h_sb = h_mnt->mnt_sb;
+		h_path.mnt = au_sbr_mnt(sb, bindex);
+		h_sb = h_path.mnt->mnt_sb;
 		shared = 0;
 		for (i = 0; !shared && i < bindex; i++)
 			shared = (au_sbr_sb(sb, i) == h_sb);
@@ -341,7 +341,8 @@
 			continue;
 
 		/* sb->s_root for NFS is unreliable */
-		err = vfs_statfs(h_mnt->mnt_root, buf);
+		h_path.dentry = h_path.mnt->mnt_root;
+		err = vfs_statfs(&h_path, buf);
 		if (unlikely(err))
 			goto out;
 
@@ -383,15 +384,18 @@
 static int aufs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
 	int err;
+	struct path h_path;
 	struct super_block *sb;
 
 	/* lock free root dinfo */
 	sb = dentry->d_sb;
 	si_noflush_read_lock(sb);
-	if (!au_opt_test(au_mntflags(sb), SUM))
+	if (!au_opt_test(au_mntflags(sb), SUM)) {
 		/* sb->s_root for NFS is unreliable */
-		err = vfs_statfs(au_sbr_mnt(sb, 0)->mnt_root, buf);
-	else
+		h_path.mnt = au_sbr_mnt(sb, 0);
+		h_path.dentry = h_path.mnt->mnt_root;
+		err = vfs_statfs(&h_path, buf);
+	} else
 		err = au_statfs_sum(sb, buf);
 	si_read_unlock(sb);
 
diff -ur aufs-2.2.old/fs/aufs/vfsub.c aufs-2.2/fs/aufs/vfsub.c
--- aufs-2.2.old/fs/aufs/vfsub.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/vfsub.c	2012-07-31 11:03:52.000000000 -0700
@@ -553,7 +553,7 @@
 
 	/* file can be NULL */
 	lockdep_off();
-	err = vfs_fsync(file, datasync);
+	err = vfs_fsync(file, path->mnt->mnt_root, datasync);
 	lockdep_on();
 	if (!err) {
 		if (!path) {
diff -ur aufs-2.2.old/fs/aufs/wbr_policy.c aufs-2.2/fs/aufs/wbr_policy.c
--- aufs-2.2.old/fs/aufs/wbr_policy.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/wbr_policy.c	2012-07-31 11:03:52.000000000 -0700
@@ -408,6 +408,7 @@
 	aufs_bindex_t bindex, bend;
 	int err;
 	unsigned long long b, bavail;
+	struct path h_path;
 	/* reduce the stack usage */
 	struct kstatfs *st;
 
@@ -430,7 +431,9 @@
 			continue;
 
 		/* sb->s_root for NFS is unreliable */
-		err = vfs_statfs(br->br_mnt->mnt_root, st);
+		h_path.mnt = br->br_mnt;
+		h_path.dentry = h_path.mnt->mnt_root;
+		err = vfs_statfs(&h_path, st);
 		if (unlikely(err)) {
 			AuWarn1("failed statfs, b%d, %d\n", bindex, err);
 			continue;
diff -ur aufs-2.2.old/fs/aufs/wkq.c aufs-2.2/fs/aufs/wkq.c
--- aufs-2.2.old/fs/aufs/wkq.c	2012-04-28 01:37:18.000000000 -0700
+++ aufs-2.2/fs/aufs/wkq.c	2012-07-31 11:03:52.000000000 -0700
@@ -107,11 +107,10 @@
 	} else
 		au_dbg_verify_kthread();
 
+	INIT_WORK(&wkinfo->wk, wkq_func);
 	if (au_ftest_wkq(wkinfo->flags, WAIT)) {
-		INIT_WORK_ON_STACK(&wkinfo->wk, wkq_func);
 		queue_work(au_wkq, &wkinfo->wk);
 	} else {
-		INIT_WORK(&wkinfo->wk, wkq_func);
 		schedule_work(&wkinfo->wk);
 	}
 }
@@ -138,7 +137,6 @@
 		/* no timeout, no interrupt */
 		wait_for_completion(wkinfo.comp);
 		au_wkq_comp_free(comp);
-		destroy_work_on_stack(&wkinfo.wk);
 	}
 
 	return err;
